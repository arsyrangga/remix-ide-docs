msgid ""
msgstr ""
"Project-Id-Version: remix-translation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-19 15:40+0200\n"
"PO-Revision-Date: 2022-05-19 13:55\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: remix-translation\n"
"X-Crowdin-Project-ID: 431830\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /[ethereum.remix-ide] master/docs/_build/gettext/unittesting_examples.pot\n"
"X-Crowdin-File-ID: 6508\n"
"Language: zh_CN\n"

#: ../../unittesting_examples.md:1
msgid "Testing by Example"
msgstr "示例测试"

#: ../../unittesting_examples.md:4
msgid "Here are some examples which can give you better understanding to plan your tests."
msgstr "以下是一些示例，可以让您更好地理解计划测试。"

#: ../../unittesting_examples.md:6
msgid "Note: Examples in this section are intended to give you a push for development. We don't recommend to rely on them without verifying at your end."
msgstr "注意：本节中的示例旨在推动您的开发。 我们不建议您在没有经过验证的情况下依赖它们。"

#: ../../unittesting_examples.md:8
msgid "1. Simple example"
msgstr "1. 简单的例子"

#: ../../unittesting_examples.md:9
msgid "In this example, we test setting & getting variables."
msgstr "在这个例子中，我们测试设置和获取变量。"

#: ../../unittesting_examples.md:11
msgid "Contract/Program to be tested: Simple_storage.sol"
msgstr "要测试的合约/程序：Simple_storage.sol"

#: ../../unittesting_examples.md:32
msgid "Test contract/program: simple_storage_test.sol"
msgstr "测试合约/程序：simple_storage_test.sol"

#: ../../unittesting_examples.md:60
msgid "2. Testing a method involving msg.sender"
msgstr "2.测试一个涉及msg.sender的方法"

#: ../../unittesting_examples.md:61
msgid "In Solidity, msg.sender plays a great role in access management of a smart contract methods interaction. Different msg.sender can help to test a contract involving multiple accounts with different roles. Here is an example for testing such case:"
msgstr "在 Solidity 中，msg.sender 在智能合约方法交互的访问管理中发挥着重要作用。 不同的 msg.sender 可以帮助测试涉及具有不同角色的多个账户的合约。 这是测试这种情况的示例："

#: ../../unittesting_examples.md:63
msgid "Contract/Program to be tested: Sender.sol"
msgstr "要测试的合约/程序：Sender.sol"

#: ../../unittesting_examples.md:85
msgid "Test contract/program: Sender_test.sol"
msgstr "测试合约/程序：Sender_test.sol"

#: ../../unittesting_examples.md:137
msgid "3. Testing method execution"
msgstr "3. 测试方法执行"

#: ../../unittesting_examples.md:139
msgid "With Solidity, one can directly verify the changes made by a method in storage by retrieving those variables from a contract. But testing for a successful method execution takes some strategy. Well that is not entirely true, when a test is successful - it is usually obvious why it passed. However, when a test fails, it is essential to understand why it failed."
msgstr "使用 Solidity，人们可以通过从合约中检索这些变量来直接验证存储中的方法所做的更改。 但是测试一个成功的方法执行需要一些策略。 好吧，这并不完全正确，当测试成功时-通常很明显为什么它通过了。 但是，当测试失败时，必须了解它失败的原因。"

#: ../../unittesting_examples.md:141
msgid "To help in such cases, Solidity introduced the try-catch statement in version 0.6.0. Previously, we had to use low-level calls to track down what was going on."
msgstr "为了在这种情况下提供帮助，Solidity 在 0.6.0 版本中引入了 try-catch 语句。 以前，我们必须使用低级调用来追踪正在发生的事情。"

#: ../../unittesting_examples.md:143
msgid "Here is an example test file that use both try-catch blocks and low level calls:"
msgstr "这是一个使用 try-catch 块和低级调用的示例测试文件："

#: ../../unittesting_examples.md:145
msgid "Contract/Program to be tested: AttendanceRegister.sol"
msgstr "要测试的合约/程序：AttendanceRegister.sol"

#: ../../unittesting_examples.md:174
msgid "Test contract/program: AttendanceRegister_test.sol"
msgstr "测试合约/程序： AttendanceRegister_test.sol"

#: ../../unittesting_examples.md:262
msgid "4. Testing a method involving msg.value"
msgstr "4.测试一个涉及msg.value的方法"

#: ../../unittesting_examples.md:263
msgid "In Solidity, ether can be passed along with a method call which is accessed inside contract as msg.value. Sometimes, multiple calculations in a method are performed based on msg.value which can be tested with various values using Remix's Custom transaction context. See the example:"
msgstr "在 Solidity 中，Eth可以与方法调用一起传递，该方法调用在合约内部作为 msg.value 访问。 有时，一个方法中的多个计算是基于 msg.value 执行的，可以使用 Remix 的自定义事务上下文使用各种值进行测试。 请参阅示例："

#: ../../unittesting_examples.md:265
msgid "Contract/Program to be tested: Value.sol"
msgstr "要测试的合约/程序：Value.sol"

#: ../../unittesting_examples.md:285
msgid "Test contract/program: Value_test.sol"
msgstr "测试合约/程序：Value_test.sol"

#: ../../unittesting_examples.md:331
msgid "5. Testing a method involving msg.sender and msg.value"
msgstr ""

#: ../../unittesting_examples.md:332
msgid "In the following test, we will be emulating multiple accounts making deposits in a smart contract to the same recipient and finally having the recipient withdraw the lump sum of all donations. We are also verifying that the donations match the expected amounts. This example really drives home how could you switch between different accounts, while using a set of different msg.value amounts."
msgstr ""

#: ../../unittesting_examples.md:334
msgid "Contract/Program to be tested: Donations.sol"
msgstr ""

#: ../../unittesting_examples.md:379
msgid "Test contract/program: Donations_test.sol"
msgstr ""

